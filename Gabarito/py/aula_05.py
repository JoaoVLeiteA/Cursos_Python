# -*- coding: utf-8 -*-
"""Aula_05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19qv0JbOeWuez5QCTOH0M8Rcql6SOMZtH

#Listas
Vetores, conjunto de valores que são alocados em uma única variável.<br>
**IMPORTANTE:** Listas são definidas pelos [ ]

---
```
lista1 = ['String', 1,2,3, True, 2.311, ['batatinha', 'frita', 123]]
```
---
"""

#          0      1      2      3      4      5      6      7      8      9     10     11
meses = ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez']
meses[1:6] # O último número é exclusivo e o primeiro é inclusivo

"""## Random
Biblioteca para criar números aleatórios.
### Randint
Comando para criar números inteiros aleatórios.
Neste comando tanto a quanto b são incluídos no range.

---
```
numero = randint(a,b)
```
---

## Append()
Este método ou função serve para adicionarmos valores a lista<br>
O append adiciona apenas 1 elemento por vez

---
```
lista.append('elemento a ser adicionado')
```
---
"""

from random import randint

numeros = []

for i in range(101):
    numeros.append(randint(0,100))

print(numeros)

"""##Count()
Este método irá contar quantas ocorrências temos de um determinado elemento.

##len()
Contar quantos elementos temos em uma lista.<br>
Método para saber o comprimento de uma lista.
"""

for i in range(len(numeros)):
    print(numeros.count(i))

"""## Para juntar mais de uma lista
### Concatenação de listas
União dos elementos de diversas listas

---
```
lista1 =[1,2,3]
lista2 =[4,5,6]
lista3 = lista1 + lista2
```
---

### Extend()
Permite a inlcusão de mais de um elemento a uma lista

---
```
lista1 =[1,2,3]
lista2 =[4,5,6]
lista1.extend(lista2)
```
---
"""

lista1 =[1,2,3]
lista2 =[4,5,6]
lista3 = lista1 + lista2
print(lista3)

lista1 =[1,2,3]
lista2 =[4,5,6]
lista1.extend(lista2)
print(lista1)

"""## Sort()
Ordenamento da lista

---
```
lista.sort() -> Ordem crescente
lista.sort(reverse=True) -> Ordem Decrescente
```
---
"""

print(numeros)

numeros.sort()
#numeros.sort(reverse = True)

"""##Tabela ASCII
###ord
Comando que converte um caractere em seu número de referência na tabela ASCII
###chr
converte um número intiro em seu caractere correspondente na tabela ASCII
"""

for i in range(200):
    print(chr(i))

"""### Exercício 1:
Criar uma lista com todas as letras minúsculas do alfabeto.
"""

# Criar uma lista chamada alfabeto
alfabeto = []
# Frazer um laço de repetição números entre 97 e 123
for i in range(97, 123):
    # Adicionando cada elemento criado à lista 
    alfabeto.append(chr(i))
# Printando a lista na tela
print(alfabeto)

"""### Exercício 2
Transcrever a mensagem do usuário de letras para números.
"""

entrada = list(input("Mensagem: "))
chave = int(input("Entre com a chave de conversão: "))
saida = ""

for letra in entrada:
    num = ord(letra)
    # Verificar SE o número inteiro está entre 97 e 122.
    if num >= 97 and num <= 122:
        # Se tiver: append na lista da saída do número + 3
        num += chave
        if num > 122:
            num -= 26
        saida += chr(num)
        # Se não tiver: append do número na lista
    else:
        saida += chr(num)

# Printando a saída
print(saida)

"""# SET
Set é uma coleção de elementos sem repetição.<br>
Para criar um set, podemos:<br>
**IMPORTANTE:** O set é definido utilizando { }
---
```
set_lista = set(lista)
s = {1,2,2,3,3,3,3,3,5,5,8,8}
print(s)
type(s)
```
---

"""

s = {1,2,2,3,3,3,3,3,5,5,8,8}
print(s)
type(s)

print(numeros)
s = set(numeros)
print(s)
print("A lista tem {} e o set tem {}".format(len(numeros), len(s)))
print(f'A lista tem {len(numeros)} e o set tem {len(s)}')

"""#Tupla
Lista de elementos não iterável. ou seja, não é possível incluir ou excluir elementos dela.
**IMPORTANTE:** Tupla é definida utilizando ( )

---
```
tupla = (1,5,4,3,8)
```
---

"""

tupla = (1,5,4,3,8)
tupla = tuple(numeros)
print(tupla.count(0))
print(tupla[3:15])
lista = list(tupla[3:35])
print(lista)

numeros.pop(5)
print(len(numeros))
print(len(tupla))

"""#Dicionário
Conjunto de valores que utilizam o padrão de chave/valor.<br>
**IMPORTANTE:** Definimos dicionários utilizando { }

---
```
dicionario = {
    'chave': 'valor',
        1  :    2   ,
    'joao' : True
}
```
---
"""

receita = {
    'jan': 100,
    'fev': 120,
    'mar': 100
}

receita['abr'] = 300
novo_elemento = {'mai': 250}
receita.update(novo_elemento)

for chave,valor in receita.items():
    print(f'{chave} : {valor}')

# Criar o dicionário com o banco de dados:
banco_dados = {
    'joao': '123',
    'felipe': '456',
    'miguel' : '789'
    }
# Criar a entrada do usuário com login e senha:
username = input("Login: ").casefold()
password = input("Senha: ").casefold()
# Fazer a varredura do dicionário pegando login e senha
for login, senha in banco_dados.items():
    # Se login = entrada de login e senha = entrada de senha...
    if login == username and senha == password:
        print(f'Bem-vindo {login}')
        break
    # Senão...
        print('Usuário ou senha inválidos')
        break

nomes = ["Joao", "Felipe", "Miguel", "Amanda"]
salario = [2000, 3000, 1500, 7000]
dicionario = {}

for i in range(len(nomes)):
    dicionario[nomes[i]] = salario[i]

print(dicionario)

gravado = (dicionario,)
print(gravado)